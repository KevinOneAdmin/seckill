#指定运行用户
user  www;
#工作进程和CPU有关
worker_processes  4;

error_log  logs/error.log;
pid        logs/nginx.pid;

#每个进程打开的最大文件数,受限于操作系统
worker_rlimit_nofile 10240;

events {
    #线程模型
    use epoll;
    #同时建立多个连接
    multi_accept on;
    #单个工作进程最大并发连接数
    worker_connections 4096;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
	#隐藏版本号
	server_tokens off;
	#文件上传时要调大，上传文件
	client_max_body_size 10m;
	
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    #log
    access_log  logs/access.log  main;
	#默认写日志：打开文件写入关闭,max:缓存的文件描述的数量,inactive:缓存时间,valid:检查时间间隔,min_uses:在inactive时间段内使用多少次加入缓存
	open_log_file_cache max=200 inactive=20s valid=1m min_uses=2;

    sendfile        on;
    tcp_nopush     on;
	
	#长连接
	#长连接超时时间
	keepalive_timeout 60;
	#可用次数
	keepalive_requests 200;
	#禁用IE6
	keepalive_disable msie6;
	
    #压缩
	#开启压缩
	gzip on;
	#在IE6上禁用
	gzip_disable "MSIE[1-6]\.(?!.*SV1)";
	#任何代理都通用
	gzip_proxied any;
	#压缩类型
	gzip_types text/plain application/x-javascrpt application/javascrpt text/css application/xml
	#vary:Accept-Encoding
	gzip_vary on;
	#如果有压缩好的直接用
	gzip_static on;
	
	
	#后端链接超时时间
	#nginx连接服务器超时时间
	proxy_connect_timeout 5;
	#服务器连接nginx超时时间
	proxy_send_timeout 5;
	#响应超时时间
	proxy_read_timeout 60;
	
	#缓存
	#缓存目录，levels:目录等级,inactive:缓存时间，keys_zone:节点名和缓存大小，max_size:最大
	proxy_cache_path /home/work/nginx/proxy_cache levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=20g;
	#忽略请求头
	proxy_ignore_headers X-Accel-Expires Expires Cache-Control;
	#隐藏
	proxy_hide_header Cache-Control;
	proxy_hide_header Pragma;
	
	#反向代理集群
	upstream server_pool{
	   server localhost:8080 weight=1 max_fails=2 fail_timeout=30s;
	   server localhost:8081 weight=1 max_fails=2 fail_timeout=30s;
	   #最大空闲的长链接数
	   keepalive 200;
	}
	
    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header connection "upgrade";
			#获取用户IP
			proxy_set_header Host $http_host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $remote_addr;
			#https相关
			proxy_set_header X-Forwarded-Proto $scheme;
			#代理
			proxy_pass http://server_pool;
        }
		
		#状态监控
		location /nginx_status {
			 #启用监控
			 stub_status on;
			 #不记log
			 access_log off;
			 #允许ip
			 allow 127.0.0.1;
			 allow 192.168.56.101;
			 #拒绝其他所有连接
			 deny all;
		}
		
		#缓存清理
		location ~/purge(/.*)
		{
		   allow 127.0.0.1;
		   allow 192.168.56.101;
		   deny all;
		   #清理路径
		   proxy_cache_purge cache_one $host$1$is_args$args;
		}

		#静态文件缓存
		location ~.*\.(gif|jpg|jpeg|png|bmp|swf|js|css|html|htm)?$
		{
		   #过期时间
		   expires 1d;
		   #使用的缓存
		   proxy_cache cache_one;
		   #放入缓存的
		   proxy_cache_valid 200 304 1d;
		   proxy_cache_valid any 1m;
		   #缓存key
		   proxy_cache_key $host$uri$is_args$args;
		   #代理
		   proxy_pass http://server_pool;
		}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
